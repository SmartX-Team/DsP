# coding: utf-8

"""
    SmartX Cluster Post - RESTful APIs

    An API server for DsP Post.  # noqa: E501

    OpenAPI spec version: 0.0.1
    Contact: jsshin@smartx.kr
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DspApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def dspcompose(self, topology, **kwargs):  # noqa: E501
        """Trigger boxes composition  # noqa: E501

        Trigger boxes composition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dspcompose(topology, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topology: Pet object that needs to be added to the store (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dspcompose_with_http_info(topology, **kwargs)  # noqa: E501
        else:
            (data) = self.dspcompose_with_http_info(topology, **kwargs)  # noqa: E501
            return data

    def dspcompose_with_http_info(self, topology, **kwargs):  # noqa: E501
        """Trigger boxes composition  # noqa: E501

        Trigger boxes composition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dspcompose_with_http_info(topology, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topology: Pet object that needs to be added to the store (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topology']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dspcompose" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topology' is set
        if ('topology' not in params or
                params['topology'] is None):
            raise ValueError("Missing the required parameter `topology` when calling `dspcompose`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'topology' in params:
            body_params = params['topology']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dsp/compose', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dsprelease(self, topology, **kwargs):  # noqa: E501
        """Trigger boxes release  # noqa: E501

        Trigger boxes release  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dsprelease(topology, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topology: Pet object that needs to be added to the store (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.dsprelease_with_http_info(topology, **kwargs)  # noqa: E501
        else:
            (data) = self.dsprelease_with_http_info(topology, **kwargs)  # noqa: E501
            return data

    def dsprelease_with_http_info(self, topology, **kwargs):  # noqa: E501
        """Trigger boxes release  # noqa: E501

        Trigger boxes release  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.dsprelease_with_http_info(topology, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str topology: Pet object that needs to be added to the store (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['topology']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dsprelease" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'topology' is set
        if ('topology' not in params or
                params['topology'] is None):
            raise ValueError("Missing the required parameter `topology` when calling `dsprelease`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'topology' in params:
            body_params = params['topology']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dsp/release', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ds_p_installer_by_name(self, installer_name, **kwargs):  # noqa: E501
        """Get all installers supported by the DsP on the post  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ds_p_installer_by_name(installer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str installer_name: The name of a installer to return (required)
        :return: Installer
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ds_p_installer_by_name_with_http_info(installer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ds_p_installer_by_name_with_http_info(installer_name, **kwargs)  # noqa: E501
            return data

    def get_ds_p_installer_by_name_with_http_info(self, installer_name, **kwargs):  # noqa: E501
        """Get all installers supported by the DsP on the post  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ds_p_installer_by_name_with_http_info(installer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str installer_name: The name of a installer to return (required)
        :return: Installer
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['installer_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ds_p_installer_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'installer_name' is set
        if ('installer_name' not in params or
                params['installer_name'] is None):
            raise ValueError("Missing the required parameter `installer_name` when calling `get_ds_p_installer_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'installer_name' in params:
            path_params['installer_name'] = params['installer_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dsp/installer/{installer_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Installer',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ds_p_installer_list(self, **kwargs):  # noqa: E501
        """Get all installers supported by the DsP on the post  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ds_p_installer_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Installer]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ds_p_installer_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_ds_p_installer_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_ds_p_installer_list_with_http_info(self, **kwargs):  # noqa: E501
        """Get all installers supported by the DsP on the post  # noqa: E501

        Multiple status values can be provided with comma separated strings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ds_p_installer_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Installer]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ds_p_installer_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dsp/installers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Installer]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
